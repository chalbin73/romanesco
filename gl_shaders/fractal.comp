#version 440

//Fractal types "enum"
const uint MANDELBROT = 0;
const uint JULIA = 1;

//Coloring methods "enum"
const uint COL_MOD = 0; //Loops the color map as you zoom
const uint COL_HIST = 1; //Uses the histogram method
const uint COL_ITER = 2; //Maps the iterations on the color map

//Local workgroupz
layout (local_size_x = 16, local_size_y = 16) in;

//Output texture
layout (rgba32f, binding = 0) uniform image2D img_output;
//Coloring map
layout (rgba32f, binding = 1) uniform image2D img_color;

//Uniforms
uniform float rp;
uniform float ip;

uniform double r;
uniform double i;
uniform double z;

uniform int iters;

uniform double exponent;

uniform double aspect_ratio;

uniform int moivre;
uniform int compute_histogram;

uniform int width;
uniform int height;

uniform int fractal;

uniform int pass;

uniform int col_method;
//Uniforms end

//Complex number
struct comp
{
    double r;
    double i;
};

//Histogram SSBO when using histogram coloring
layout(std430, binding = 3) buffer histo_data
{
    uint iter_histo[];
};

//Total used in histogram coloring
layout(std430, binding = 4) buffer histo_tot
{
    uint total_histo;
};

//Using STB_INCLUDE library
#include "util.comp"
#include "exp.comp"
#include "mandelbrot.comp"
#include "julia.comp"

void main() {
    //Coords on the texture
    ivec2 coords = ivec2(gl_GlobalInvocationID);

    //Coords on the selected window (in the complex plane)
    dvec2 npos = dvec2(map(coords.x, 0, width, -1.0, 1.0) * aspect_ratio, map(coords.y, 0, height, -1.0, 1.0)) / float(z);
    npos.x += r;
    npos.y += i;

    //Check if the current pixel is visible in the context (prevents computing usless pixels)
    if(coords.x < width && coords.y < height)
    {
        if(pass == 0)
        {
            // ------------ PASS 0 ------------
            // PASS 0 : Compute the number of iterations per pixels
            vec4 pixel;
            int iter_esc = 0;
            if(fractal == MANDELBROT)
            {
                iter_esc = mandelbrot(npos.x, npos.y);
            }else if(fractal == JULIA)
            {
                iter_esc = julia(npos.x, npos.y, rp, ip);
            }

            if(col_method == COL_HIST || compute_histogram != 0)
            {
                atomicAdd(iter_histo[iter_esc], 1);

                if(iter_esc != iters)
                {
                    atomicAdd(total_histo, 1);
                }
            }

            

            //Store the number of iterations in the texture
            imageStore(img_output, coords, vec4(float(iter_esc)));
        }else if(pass == 1)
        {
            // ------------ PASS 1 ------------
            // PASS 1: Use the previously computed iterations to apply color

            //Get the number of iterations from the image
            float num_iterations = imageLoad(img_output, coords).x;

            vec4 c = vec4(0.0);
            if(col_method == COL_MOD)
            {
                int cpos = int(float(num_iterations) / float(iters) * 500) % 255;

                //Load from color_map
                c = imageLoad(img_color, ivec2(cpos, 0));
            }else if(col_method == COL_HIST)
            {
                float hue = 0;
                if(num_iterations >= float(iters) - 0.001f)
                {
                    c = vec4(0.0);
                }
                for(int i = 0; i <= int(num_iterations); i++)
                {
                    hue += float(iter_histo[i]) / float(total_histo);
                }
                if(hue > 1.0)
                {
                    c = vec4(1.0, 0.0, 1.0, 1.0);
                }else
                {
                }
                hue = pow(100000000, hue - 1);

                //Load from color_map
                c = imageLoad(img_color, ivec2(hue * 255.0, 0));
            }else
            {
                int cpos = int(255.0 * float(num_iterations) / float(iters));

                //Load from color_map
                c = imageLoad(img_color, ivec2(cpos, 0));
            }

            if(num_iterations == iters)
            {
                c = vec4(0.0);
            }

            imageStore(img_output, coords, c);
        }
    }
}